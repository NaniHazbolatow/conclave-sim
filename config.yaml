# ===================================================================
# CONCLAVE SIMULATION CONFIGURATION
# ===================================================================
# This file configures all aspects of the papal conclave simulation.
# Modify settings below to customize the simulation behavior.

# ===================================================================
# LANGUAGE MODEL (LLM) CONFIGURATION
# ===================================================================
# Controls how cardinal agents think and communicate
llm:
  # Backend type: choose "local" for privacy/offline or "remote" for cloud models
  backend: "remote"  # Options: "local", "remote"
  
  # Text generation parameters (affect cardinal personalities)
  temperature: 0.7        # Creativity/randomness (0.0-2.0, higher = more creative)
  max_tokens: 500         # Maximum response length per cardinal
  
  # Local Model Configuration (HuggingFace models)
  local:
    # Recommended models for different hardware:
    # - For powerful GPUs: "Qwen/Qwen2.5-3B-Instruct" 
    # - For limited memory: "Qwen/Qwen2.5-1.5B-Instruct"
    model_name: "Qwen/Qwen2.5-1.5B-Instruct"
    #model_name: "meta-llama/llama-3.1-8b-instruct"

    # Hardware acceleration (auto-detects best option)
    device: "auto"  # Options: "auto", "cpu", "cuda" (NVIDIA), "mps" (M1/M2 Mac)
    
    # Memory optimization (requires: pip install bitsandbytes)
    use_quantization: false  # Set to true to reduce memory usage
    
    # Model storage location
    cache_dir: "~/.cache/huggingface"
    
    # Advanced generation parameters
    do_sample: true
    top_p: 0.9              # Nucleus sampling threshold
    repetition_penalty: 1.1  # Prevents repetitive text
    
  # Remote Model Configuration (OpenRouter API)
  remote:
    # Choose your preferred cloud model:
    model_name: "openai/gpt-4o-mini"      # Fast, cost-effective
    # model_name: "mistralai/mistral-nemo"  # Good balance
    # model_name: "qwen/qwen3-14b"          # High quality
    #model_name: "meta-llama/llama-3.1-8b-instruct"
    
    # API settings
    base_url: "https://openrouter.ai/api/v1"
    api_key_env: "OPENROUTER_API_KEY"  # Set this environment variable
    
    # Generation parameters
    top_p: 0.9
    frequency_penalty: 0.1
    presence_penalty: 0.1

# ===================================================================
# EMBEDDING MODEL CONFIGURATION
# ===================================================================
# Controls similarity search and cardinal relationship analysis
embeddings:
  # Model selection (affects quality vs speed tradeoff)
  model_name: "intfloat/e5-large-v2"  # High quality, 1024 dimensions
  # Alternative models:
  # "all-MiniLM-L6-v2"           # Faster, 384 dimensions, good for testing
  # "sentence-transformers/all-mpnet-base-v2"  # Balanced option
  
  # Hardware acceleration (auto-detects MPS for M1/M2 Macs)
  device: "auto"  # Options: "auto", "cpu", "cuda", "mps"
  
  # Performance settings
  batch_size: 32              # Number of texts to process at once
  enable_caching: true        # Cache embeddings to disk for faster reuse
  cache_dir: "~/.cache/embeddings"  # Where to store cached embeddings
  
  # Similarity search settings
  similarity_threshold: 0.7   # Minimum similarity for matches (0.0-1.0)
  max_search_results: 10      # Maximum similar items to return
  
  # Clustering settings (for grouping similar cardinals)
  clustering:
    enable: true
    method: "kmeans"          # Options: "kmeans", "hierarchical"
    n_clusters: "auto"        # Number of groups, or "auto" to detect
    min_cluster_size: 2       # Minimum cardinals per cluster

# ===================================================================
# SIMULATION SETTINGS
# ===================================================================
# Core simulation behavior and rules
simulation:
  # Debugging and monitoring
  log_level: "INFO"         # Options: "DEBUG", "INFO", "WARNING", "ERROR"
  performance_logging: true # Track timing and performance metrics
  
  # Cardinal selection
  num_cardinals: 3          # Number of cardinals to include in simulation (from CSV head)
  
  # Discussion structure
  max_speakers_per_round: 3     # Maximum cardinals who can speak per round
  num_discussions: 1        # Number of complete discussion cycles to run per election round
  max_election_rounds: 1    # Maximum number of full election rounds before stopping (no winner required)
  
  # Voting rules
  voting:
    require_reasoning: true     # Cardinals must explain their vote
    supermajority_threshold: 0.667  # Requires 2/3 supermajority (67%) to elect Pope

# ===================================================================
# VISUALIZATION SETTINGS
# ===================================================================
# Controls 2D visualization and cardinal positioning
visualization:
  # Dimensionality reduction method for 2D positioning
  reduction_method: "pca"     # Options: "pca", "tsne", "umap"
  
  # PCA-specific settings
  pca:
    random_state: 42          # For reproducible results
    
  # t-SNE settings (if using tsne)
  tsne:
    random_state: 42
    perplexity: 5             # Controls local vs global structure (auto-adjusted for small datasets)
    n_iter: 1000             # Number of optimization iterations
    
  # UMAP settings (if using umap)
  umap:
    random_state: 42
    n_neighbors: 5            # Controls local vs global structure (auto-adjusted for small datasets)
    min_dist: 0.1            # Minimum distance between points in low-dimensional space
    
  # Grid positioning
  grid:
    size: 100                 # Grid size (0-100 coordinate system)
    jitter: 2.0              # Small random offset to avoid overlaps
    
  # Plot styling
  plot:
    figure_size: [12, 8]      # Width, height in inches
    point_size: 120           # Size of cardinal points
    font_size: 10             # Label font size
    alpha: 0.8               # Point transparency
    colormap: "tab10"        # Color scheme for different groups
    
  # Analysis settings
  analysis:
    cluster_distance_threshold: 30  # Minimum distance for good separation
    show_cluster_centers: true      # Display cluster center points
    show_distances: true           # Show distances between clusters
